import pandas as pd
rule pileup:
    input:
        bam = output_dir + 'BQSR/{sample}.markdups.BQSR.bam'
    output:
        output_dir + 'mutect2/pileup/{sample}.pileup.table'
    params:
        gatk = config['soft']['gatk'],
        genome = config['fa'],
        interval_list = config['wes_config']['Preprocessed_interval'],
        aof = config['aof']

    shell:
        '''
        {params.gatk} --java-options "-Xmx50G -Djava.io.tmpdir=./" GetPileupSummaries \
        -R {params.genome} \
        -I {input} \
        -L {params.interval_list} \
        -V {params.aof} \
        -O {output}
        '''

rule PoN_build:
    input:
        bam = output_dir + 'BQSR/{sample_normal}.markdups.BQSR.bam'
    output:
        vcf = output_dir + 'mutect2/PoN/{sample_normal}.vcf.gz'
    params:
        gatk = config['soft']['gatk'],
        genome = config['fa'],
        interval_list = config['wes_config']['Preprocessed_interval']
    log:
        err = output_dir + 'log/PoN/{sample_normal}.err.log',
        out = output_dir + 'log/PoN/{sample_normal}.stdout.log'
    shell:
        '''
        {params.gatk} --java-options "-Xmx50G -Djava.io.tmpdir=./" Mutect2 \
        -R {params.genome} \
        -I {input.bam} \
        -tumor {wildcards.sample_normal} \
        --disable-read-filter MateOnSameContigOrNoMappedMateReadFilter \
        -L {params.interval_list} \
        -O {output.vcf} 2>{log.err} 1>{log.out}
        '''

rule PoN_create:
    input:
        expand(output_dir + 'mutect2/PoN/{sample_normal}.vcf.gz', 
            sample_normal = samples.Label[samples.Type=="N"].values.tolist())
    output:
        pon_vcf = output_dir + 'mutect2/PoN/PoN.vcf.gz'
    params:
        gatk = config['soft']['gatk'],
        genome = config['fa']
    log:
        err = output_dir + 'log/PoN_create/PoN.err.log',
        out = output_dir + 'log/PoN_create/PoN.stdout.log'
    run:
        label_out = ' -vcfs '.join(input)
        shell('''
        {params.gatk} --java-options "-Xmx50G -Djava.io.tmpdir=./" CreateSomaticPanelOfNormals \
        -vcfs {label_out} -O {output.pon_vcf} 2>{log.err} 1>{log.out}
        ''')

rule pair_com:
    input:
        ca = output_dir + 'BQSR/{tumor_label}.markdups.BQSR.bam',
        normal = lambda wildcards: output_dir + 'BQSR/{}.markdups.BQSR.bam'.format(pair_com_dic[wildcards.tumor_label])
    output:
        vcf = output_dir + 'mutect2/rawvcf/{tumor_label}.vcf.gz',
        bam = output_dir + 'mutect2/mutect2_bam/{tumor_label}.mutect2.bam',
    params:
        gatk = config['soft']['gatk'],
        genome = config['fa'],
        interval_list = config['wes_config']['Preprocessed_interval'],
        aof = config['aof'],
        normal_label = lambda wildcards: pair_com_dic[wildcards.tumor_label]
    log:
        err = output_dir + 'log/pair_com/{tumor_label}.err.log',
        out = output_dir + 'log/pair_com/{tumor_label}.stdout.log'

    run:
        if input.normal == input.ca:
            func = '''
                {params.gatk} --java-options "-Xmx80G -Djava.io.tmpdir=./" Mutect2 \
                -R {params.genome} \
                -I {input.ca} \
                -tumor {wildcards.tumor_label} \
                --germline-resource {params.aof} \
                --af-of-alleles-not-in-resource 0.0000025 \
                -L {params.interval_list} \
                -O {output.vcf} \
                --bam-output {output.bam} 2>{log.err} 1>{log.out}
                '''
            print(func)
            shell(func)
        else:
            func = '''
                {params.gatk} --java-options "-Xmx80G -Djava.io.tmpdir=./" Mutect2 \
                -R {params.genome} \
                -I {input.ca} \
                -tumor {wildcards.tumor_label} \
                -I {input.normal} \
                -normal {params.normal_label} \
                --germline-resource {params.aof} \
                --af-of-alleles-not-in-resource 0.0000025 \
                -L {params.interval_list} \
                -O {output.vcf} \
                --bam-output {output.bam} 2>{log.err} 1>{log.out}
                '''
            print(func)
            shell(func)



rule CalculateContamination:
    input:
        ca = output_dir + 'mutect2/pileup/{normal_use_label}.pileup.table',
        normal = lambda wildcards: output_dir + 'mutect2/pileup/{}.pileup.table'.format(pair_com_dic[wildcards.normal_use_label])

    output:
        contamination = output_dir + 'mutect2/contamination/{normal_use_label}.contamination.table',
        segment = output_dir + 'mutect2/contamination/{normal_use_label}.segments.table'
    params:
        gatk = config['soft']['gatk'],
        genome = config['fa']
    log:
        err = output_dir + 'log/CalculateContamination/{normal_use_label}.err.log',
        out = output_dir + 'log/CalculateContamination/{normal_use_label}.stdout.log'

    shell:
        '''
        {params.gatk} --java-options "-Xmx50G -Djava.io.tmpdir=./" CalculateContamination \
        -I {input.ca} \
        -matched {input.normal} \
        -O {output.contamination}  \
        --tumor-segmentation {output.segment}  2>{log.err} 1>{log.out}
        '''

rule filter_vcf:
    input:
        contamination = output_dir + 'mutect2/contamination/{normal_use_label}.contamination.table',
        segment = output_dir + 'mutect2/contamination/{normal_use_label}.segments.table',
        vcf = output_dir + 'mutect2/rawvcf/{normal_use_label}.vcf.gz'

    output:
        output_dir + 'mutect2/vcf/{normal_use_label}.vcf.gz'
    params:
        gatk = config['soft']['gatk'],
        genome = config['fa'],

    shell:
        '''
        {params.gatk} --java-options "-Xmx80G -Djava.io.tmpdir=./" FilterMutectCalls \
        -V {input.vcf} \
        -R {params.genome} \
        -O {output} \
        --contamination-table {input.contamination}
        '''

rule vep_annot:
    input:
        output_dir + 'mutect2/vcf/{normal_use_label}.vcf.gz'
    output:
        output_dir + 'mutect2/vep/raw/{normal_use_label}.vep.vcf'
    params:
        vep = config['soft']['vep'],
        vep_fa = config['vep']['fa'],
        vep_dir = config['vep']['dir'],
        ass_ver = config['vep']['ver'],
        db = config['vep']['db']
    shell:
        '''
        {params.vep} --species homo_sapiens \
        --offline --no_progress --no_stats \
        --sift b --ccds --uniprot --hgvs \
        --symbol --numbers --domains \
        --gene_phenotype --canonical \
        --protein --biotype --uniprot \
        --tsl --pubmed --variant_class \
        --shift_hgvs 1 --check_existing \
        --total_length --allele_number \
        --no_escape --xref_refseq --failed 1 \
        --vcf --minimal --flag_pick_allele \
        --pick_order canonical,tsl,biotype,rank,ccds,length \
        --dir {params.vep_dir} \
        --fasta {params.vep_fa} \
        --format vcf --input_file {input} \
        --output_file {output} --polyphen b --af \
        --af_1kg --af_esp --regulatory \
        --assembly {params.ass_ver} --database ~/.vep/homo_sapiens/100_GRCh38 \
        --force_overwrite
        '''
rule vcf_pass:
    input:
        output_dir + 'mutect2/vep/raw/{normal_use_label}.vep.vcf'
    output:
        output_dir + 'mutect2/vep/pass/{normal_use_label}.PASS.vep.vcf'
    params:
        bcftools = config['soft']['bcftools']
    shell:
        '''
        {params.bcftools} view -f PASS {input} > {output}
        '''
# rule vcf_pass_2:
#     input:
#         output_dir + 'mutect2/vep/raw/{normal_use_label}.PASS.vcf'
#     output:
#         output_dir + 'mutect2/vep/pass/{normal_use_label}.PASS.vep.vcf'
#     shell:
#         '''
#         cp {input} {output}
#         '''

rule vcf2maf:
        input:
            # output_dir + 'mutect2/vep/pass/{normal_use_label}.PASS.vcf',
            output_dir + 'mutect2/vep/pass/{normal_use_label}.PASS.vep.vcf'
        output:
            output_dir + 'mutect2/vep/pass/{normal_use_label}.vep.maf'
        params:
            label = '{normal_use_label}',
            normal_label = lambda wildcards: pair_com_dic[wildcards.normal_use_label],
            vep_fa = config['vep']['fa'],
            genome_ver = config['vep']['ver'],
            cache = config['vep']['cache']
        shell:
            '''
            /home/zhouran/data/soft/vcf2maf-master/vcf2maf.pl \
            --input-vcf {input[0]} \
            --output-maf {output} \
            --tumor-id {params.label} \
            --normal-id {params.normal_label} \
            --ref-fasta {params.vep_fa} \
            --ncbi-build {params.genome_ver} \
            --filter-vcf 0 \
            --cache-version {params.cache}
            '''
rule mergemaf:
        input:
            expand(output_dir + 'mutect2/vep/pass/{normal_use_label}.vep.maf',
                normal_use_label = normal_use)
        output:
            output_dir + 'mutect2/vep/merged.maf'
        run:
            cmds = ['cat {input} | egrep "^#|^Hugo_Symbol" | head -2 > {output}',
                    'cat {input} | egrep -v "^#|^Hugo_Symbol" >> {output}']
            for cmd in cmds:
                shell(cmd)

rule mutect2_done:
    input:
        expand(output_dir + 'mutect2/rawvcf/{tumor_label}.vcf.gz', \
            tumor_label = samples.Label[samples.Type != 'N']),
        expand(output_dir + 'mutect2/vep/pass/{normal_use_label}.vep.maf', \
            normal_use_label = normal_use
            ),
        output_dir + 'mutect2/vep/merged.maf'
    output:
        output_dir + 'mutect2/vcf/welldone'
    shell:
        '''
        touch {output}
        '''


rule CNV_kit:
    input:
        ca = output_dir + 'BQSR/{normal_use_label}.markdups.BQSR.bam',
        normal = lambda wildcards: output_dir + 'BQSR/{}.markdups.BQSR.bam'.format(pair_com_dic[wildcards.normal_use_label])
    output:
        output_dir +  'CNV/coverage/{normal_use_label}/{normal_use_label}.markdups.BQSR.targetcoverage.cnn'

    params:
        cap_region= config['wes_config']['INTERVAL'],
        genome = config['fa'],
        access_five = config['wes_config']['access_five'],
        reference = output_dir +  'CNV/coverage/{normal_use_label}/reference.cnn',
        outdir = output_dir + 'CNV/coverage/{normal_use_label}/'
    log:
        err = output_dir + 'log/CNV_kit/{normal_use_label}.err.log',
        out = output_dir + 'log/CNV_kit/{normal_use_label}.stdout.log'

    shell:
        '''
        cnvkit.py batch {input.ca} \
        --normal {input.normal} \
        --targets {params.cap_region} \
        --fasta {params.genome} \
        --access {params.access_five} \
        --target-avg-size 100 \
        --output-reference {params.reference} --output-dir {params.outdir} \
        --diagram   --scatter  -p 2 2>{log.err} 1>{log.out}
        '''

rule gistic2_pre:
    input:
        expand(output_dir +  'CNV/coverage/{normal_use_label}/{normal_use_label}.markdups.BQSR.targetcoverage.cnn',
            normal_use_label = normal_use)
    output:
        output_dir + 'CNV/gistic2/input/allsample.seg.tsv',
        output_dir + 'CNV/gistic2/input/markers.tsv'
    params:
        r_script = config['soft']['r_script'],
        make_gistic = config['script']['make_gistic'],
        label = ','.join(expand('{normal_use_label}', normal_use_label=normal_use)),
        out_prefix = output_dir + 'CNV/gistic2/input/',
        input_join = lambda wildcards: \
            ','.join(expand(output_dir +  \
            'CNV/coverage/{normal_use_label}/{normal_use_label}.markdups.BQSR.targetcoverage.cnn',\
            normal_use_label = normal_use))
    shell:
        '''
        {params.r_script} {params.make_gistic} {params.input_join} {params.label} {params.out_prefix}
        '''
rule gistic2:
    input:
        seg = output_dir + 'CNV/gistic2/input/allsample.seg.tsv',
        markers = output_dir + 'CNV/gistic2/input/markers.tsv'
    output:
        output_dir + "CNV/gistic2/scores.gistic"
    params:
        gistic = config['soft']['gistic2'],
        out_pre = output_dir + 'CNV/gistic2/',
        gistic_ref = config['gistic2']['mat']
    shell:
        # copy from https://docs.gdc.cancer.gov/Data/Bioinformatics_Pipelines/CNV_Pipeline/
        '''
        /home/zhouran/data/soft/GISTIC/gistic2 \
        -b {params.out_pre} \
        -seg {input.seg} \
        -mk {input.markers} \
        -refgene {params.gistic_ref} \
        -ta 0.1 \
        -armpeel 1 \
        -brlen 0.7 \
        -cap 1.5 \
        -conf 0.99 \
        -td 0.1 \
        -genegistic 1 \
        -gcm extreme \
        -js 4 \
        -maxseg 2000 \
        -qvt 0.25 \
        -rx 0 \
        -savegene 1
        '''

rule cnv_done:
    input:
        # expand(output_dir + 'mutect2/vcf/{normal_use_label}.vcf.gz', normal_use_label = normal_use),
        expand(output_dir +  'CNV/coverage/{normal_use_label}/{normal_use_label}.markdups.BQSR.targetcoverage.cnn', normal_use_label = normal_use)
    output:
        output_dir + 'CNV/coverage/welldone'
    shell:
        '''
        touch {output}
        '''