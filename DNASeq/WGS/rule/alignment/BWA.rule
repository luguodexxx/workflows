# def bwa_func(wildcards):
# 	# fetch the library type from the meta information 
# 	lib_type = samples.type[samples.names == wildcards.sample].values.tolist()[0]
# 	# print(wildcards.sample)
# 	if lib_type == "SE":
# 		return([FASTQdir + f"{wildcards.sample}_" + str(config["fqsuffix"]) + ".gz"])

# 	if lib_type == "PE":
# 		return([FASTQdir + f"{wildcards.sample}_" + str(config["fqext1"]) + "." + str(config["fqsuffix"]) + ".gz",
# 				FASTQdir + f"{wildcards.sample}_" + str(config["fqext2"]) + "." + str(config["fqsuffix"]) + ".gz"])
		
	
# 	raise(ValueError("Unrecognized library type value: %s" % wildcards.sample))

rule bwa:
	input:
		FASTQdir + "{sample}.{index}.{lane}." +str(config["fqext1"]) + "." + str(config["fqsuffix"]) + ".gz",
		FASTQdir + "{sample}.{index}.{lane}." +str(config["fqext2"]) + "." + str(config["fqsuffix"]) + ".gz"
	
	output:
		temp(output_dir + "BWA/{sample}.{index}.{lane}.bam")
	
	params:
		bwa   = config['soft']['bwa'],
		cores = config['bwa']['cores'],
		index = config['bwa']['index'],
		samtools = config['soft']['samtools'],
		sample = '{sample}',
		id = '{sample}.{index}'
		
	shell:
		"""
		
		{params.bwa} mem -R '@RG\\tID:{params.id}\\tSM:{params.sample}\\tPL:Illumina' \
		-t {params.cores} {params.index} {input} | {params.samtools} sort -O bam - -o {output}

		"""

